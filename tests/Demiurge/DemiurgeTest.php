<?php
namespace Demiurge\Test;

use Demiurge\Demiurge;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-10-14 at 10:02:10.
 */
class DemiurgeTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Demiurge
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->demiurge = new Demiurge;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    public function testSetConstant()
    {
        $this->demiurge->constant = 'a';

        $this->assertEquals('a', $this->demiurge->constant);
    }

    public function testMethodCalledAsProperty()
    {
        $d = new DemiurgeMock();
        $nicValue = $d->nic();
        $gabValue = $d->getGab();

        $this->assertEquals($nicValue, $d->nic, 'Access a method result as a property');
        $this->assertEquals($gabValue, $d->gab, 'Access a method result as a property, where the method has getter syntax');
    }

    /**
     * @expectedException OutOfBoundsException
     */
    public function testGetNonexistentService()
    {
        $this->demiurge->xxx;
    }

    public function testServiceCalledAsProperty()
    {
        $testCase = $this;
        $this->demiurge->service = function(Demiurge $demiurge) use($testCase) {
            $testCase->assertInstanceOf('Demiurge\Demiurge', $demiurge, 'First argument has to be an instance of Demiurge class');

            return 'returnValue';
        };

        $this->assertEquals('returnValue', $this->demiurge->service, 'Service is resolved');
    }

    public function testServiceCalledAsMethod()
    {
        $v1 = 'a';
        $v2 = 100;
        $testCase = $this;

        $this->demiurge->serviceAsMethod = function(Demiurge $demiurge, $arg1, $arg2) use ($testCase, $v1, $v2) {
            $testCase->assertEquals($v1, $arg1);
            $testCase->assertEquals($v2, $arg2);

            return 'returnValue';
        };

        $this->assertEquals('returnValue', $this->demiurge->serviceAsMethod($v1, $v2));
    }

    public function testProtect()
    {
        $f = $this->demiurge->protect('ciao');

        $this->assertEquals('ciao', $f());
    }

    public function testShare()
    {
        $f = function (Demiurge $d) {
            static $var = 0;
            ++$var;

            return $var;
        };

        $shared = $this->demiurge->share($f);

        $this->assertEquals(1, $shared($this->demiurge));
        $this->assertEquals(1, $shared($this->demiurge));
    }

    public function testHasService()
    {
        $d = new DemiurgeMock();

        $d->var = 'var';
        $d->service = function() { return ''; };

        $this->assertTrue($d->hasService('var'), 'HasService: Plain variable service');
        $this->assertTrue($d->hasService('service'), 'HasService: closure service');
        $this->assertTrue($d->hasService('nic'), 'HasService: method service');
        $this->assertTrue($d->hasService('gab'), 'HasService: getter service');

        $this->assertFalse($d->hasService('xxx'), 'HasService: inexistent service');
    }

    public function testGetRawService()
    {
        $d = new DemiurgeMock();
        $d->var = 'var';

        $service = $d->getRawService('var');

        $this->assertInstanceOf('Closure', $service, 'Plain vars are closures that returns the var value');
        $this->assertEquals('var', $service(), 'Plain vars are closures that returns the var value');

        $service = $d->getRawService('gab');
        $this->assertEquals(array($d, 'getGab'), $service, 'Instance getters become the correnspondent array callable');
    }

    /**
     * @expectedException OutOfBoundsException
     */
    public function testGetRawServiceWhenServiceIsNotDefined()
    {
        $this->demiurge->ciao;
    }

/*    public function testMerge()
    {
        $d1 = new DemiurgeMock;
        $d2 = new Demiurge;

        $d1->service = function() { return 'service'; };
        $d1->serviceWithArgs = function(Demiurge $d, $arg1) { return $arg1; };
        $d1->var1 = 'var1';

        $d2->merge($d1);

        $this->assertEquals('service', $d2->service, 'Merged service, property access');
        $this->assertEquals('xyz', $d2->serviceWithArgs('xyz'), 'Merged service, method access');
        $this->assertEquals('var1', $d2->var1, 'Merged service, plain variable');
        $this->assertEquals('nic', $d2->nic, 'Merged service, instance method');
        $this->assertEquals('gab', $d2->gab, 'Merged service, instance getter');
    }*/

}

class DemiurgeMock extends Demiurge
{
    public function nic()
    {
        return 'nic';
    }

    public function getGab()
    {
        return 'gab';
    }
}